# ====================================
# Part 8. 클래스 정의와 객체 생성
# ====================================

# 1. 가장 간단한 클래스 정의하기
print("--- 1. 가장 간단한 클래스 정의하기 ---")

# class 키워드를 사용하여 새로운 데이터 타입(클래스)을 정의합니다.
# 설계도와 같으며, 아직 아무 기능도 없는 빈 클래스입니다.
class House:
    pass # 내부 구현이 아직 없다는 것을 의미하는 키워드입니다.

# 클래스를 호출하여 실제 객체(인스턴스)를 생성합니다.
# 설계도로부터 실제 집을 짓는 과정과 같습니다.
house01 = House()
house02 = House()

# 각 인스턴스는 메모리 상에 존재하는 고유한 객체입니다.
# 출력 결과는 객체의 클래스명과 메모리 주소를 보여줍니다.
print("house01 인스턴스의 정보:", house01)
print("house02 인스턴스의 정보:", house02)
print("-" * 20)


# 2. 초기화 메서드 __init__ 활용하기
print("\n--- 2. 초기화 메서드 __init__ 활용하기 ---")

# 게임 몬스터를 표현하기 위한 클래스를 정의합니다.
class Monster:
    # __init__ 메서드: 인스턴스가 생성될 때 단 한 번, 자동으로 호출되는 특별한 메서드입니다.
    # 인스턴스의 초기 상태(속성)를 설정하는 역할을 합니다.
    # 첫 번째 매개변수 self는 생성되는 인스턴스 자기 자신을 가리킵니다.
    def __init__(self, name, hp):
        print(f"새로운 몬스터 '{name}'이(가) 생성되었습니다.")
        # self.속성명 = 값 : 인스턴스에 속성을 추가하고 값을 할당합니다.
        self.name = name # 전달받은 name 값을 인스턴스의 name 속성에 저장합니다.
        self.hp = hp     # 전달받은 hp 값을 인스턴스의 hp 속성에 저장합니다.

# Monster 클래스로부터 인스턴스를 생성할 때, __init__ 메서드에 정의된 매개변수(self 제외)를 전달해야 합니다.
# "슬라임"과 30이라는 값이 __init__의 name과 hp로 각각 전달됩니다.
monster1 = Monster("슬라임", 30)
monster2 = Monster("고블린", 50)

# 점(.) 연산자를 사용하여 인스턴스의 속성에 접근할 수 있습니다.
print(f"첫 번째 몬스터: {monster1.name}, 체력: {monster1.hp}")
print(f"두 번째 몬스터: {monster2.name}, 체력: {monster2.hp}")
print("-" * 20)


# 3. 인스턴스의 독립성 확인하기
print("\n--- 3. 인스턴스의 독립성 확인하기 ---")

# monster1의 hp 속성 값을 변경합니다.
print(f"'{monster1.name}'의 체력을 10으로 변경합니다.")
monster1.hp = 10

# monster1의 변경 사항이 monster2에 영향을 주지 않습니다.
# 각 인스턴스는 서로 독립적인 데이터를 가진 별개의 객체이기 때문입니다.
print(f"첫 번째 몬스터 정보: {monster1.name}, 체력: {monster1.hp}")
print(f"두 번째 몬스터 정보: {monster2.name}, 체력: {monster2.hp}")
print("-" * 20)


# 4. 응용: Player 클래스 만들어보기
print("\n--- 4. 응용: Player 클래스 만들어보기 ---")

# 플레이어의 이름(name)과 직업(job)을 속성으로 가지는 Player 클래스를 정의합니다.
class Player:
    def __init__(self, name, job):
        self.name = name
        self.job = job

# Player 클래스로부터 두 개의 독립적인 인스턴스를 생성합니다.
player1 = Player("김민수", "전사")
player2 = Player("이지은", "마법사")

# 각 플레이어의 정보를 출력합니다.
print(f"플레이어1: {player1.name}, 직업: {player1.job}")
print(f"플레이어2: {player2.name}, 직업: {player2.job}")


'''
    - 정리하며
        1. 클래스(class)는 객체의 속성과 행동을 정의하는 '설계도' 또는 '틀' 입니다. 새로운 데이터 타입을 만드는 방법입니다.
        2. 인스턴스(instance)는 클래스라는 설계도를 바탕으로 메모리에 실제로 생성된 '객체' 입니다.
        3. __init__ 메서드는 인스턴스가 생성될 때 자동으로 호출되는 '초기화 메서드' 입니다. 객체가 가져야 할 초기 값을 설정합니다.
        4. self는 클래스 내부의 메서드에서 사용되며, 생성되는 '인스턴스 자기 자신'을 가리키는 특별한 매개변수입니다.
        5. self.속성명 = 값 형태로 인스턴스 변수를 만들어, 각 인스턴스가 자신만의 고유한 데이터를 가지도록 할 수 있습니다.
        6. 이렇게 생성된 각 인스턴스는 서로에게 영향을 주지 않는 독립적인 객체입니다.
'''
