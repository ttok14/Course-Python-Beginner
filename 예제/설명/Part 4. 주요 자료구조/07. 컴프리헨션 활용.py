# ====================================
# Part4. 컴프리헨션 활용
# ====================================

# 컴프리헨션(Comprehension)은 반복문을 사용하여 기존 데이터 묶음(iterable)으로부터
# 새로운 리스트, 딕셔너리, 또는 세트를 생성하는 간결하고 효율적인 방법입니다.

# 실습에 사용할 기본 숫자 및 문자열 리스트를 준비합니다.
numbers = [1, 2, 3, 4, 5]
words = ['apple', 'banana', 'cherry', 'kiwi', 'orange']


# --- 1. 리스트 컴프리헨션 (List Comprehension) ---
# 대괄호 [] 안에 표현식과 for 반복문을 사용하여 새로운 리스트를 생성합니다.

# 예제 1-1: 리스트의 각 숫자에 10을 곱한 새 리스트 생성
# for n in numbers: numbers 리스트의 각 요소를 n으로 가져옵니다.
# n * 10: 가져온 요소 n에 10을 곱하는 표현식입니다. 이 결과가 새 리스트의 요소가 됩니다.
multiplied_by_10 = [n * 10 for n in numbers]
print("1-1. 각 숫자에 10을 곱한 리스트:", multiplied_by_10)

# 예제 1-2: 길이가 5 이상인 단어만 선택하여 새 리스트 생성
# for... 뒤에 if 조건문을 추가하여 특정 조건을 만족하는 요소만 포함시킬 수 있습니다.
# 실행 순서: 1) for word in words -> 2) if len(word) >= 5 -> 3) word (표현식)
long_words = [word for word in words if len(word) >= 5]
print("1-2. 길이가 5 이상인 단어:", long_words)

# 예제 1-3: 모든 단어를 대문자로 변환하여 새 리스트 생성
# 표현식 부분에서 upper()와 같은 메서드를 호출하여 값을 변환할 수 있습니다.
upper_words = [word.upper() for word in words]
print("1-3. 대문자로 변환된 단어:", upper_words)


# --- 2. 딕셔너리 컴프리헨션 (Dictionary Comprehension) ---
# 중괄호 {}를 사용하고, '키:값' 형태의 표현식을 작성하여 새로운 딕셔너리를 생성합니다.

# 실습에 사용할 과일 이름 리스트와 가격 리스트를 준비합니다.
fruits = ['사과', '바나나', '딸기']
prices = [1500, 3000, 2000]

# 예제 2-1: 과일 이름을 키로, 가격을 값으로 하는 딕셔너리 생성
# zip() 함수는 두 리스트의 요소들을 순서대로 짝지어 줍니다. (예: ('사과', 1500), ('바나나', 3000))
# for f, p in zip(fruits, prices): 짝지어진 값을 f와 p 변수로 받습니다.
# f: p: f를 키로, p를 값으로 하는 딕셔너리 항목을 생성합니다.
fruit_price_dict = {f: p for f, p in zip(fruits, prices)}
print("\n2. 과일 가격 딕셔너리:", fruit_price_dict)


# --- 3. 세트 컴프리헨션 (Set Comprehension) ---
# 딕셔너리와 같이 중괄호 {}를 사용하지만, 표현식이 단일 값으로 구성됩니다.
# 세트(Set)의 특징인 '중복을 허용하지 않음'이 그대로 적용됩니다.

# 실습에 사용할 중복된 숫자가 포함된 리스트를 준비합니다.
numbers_with_duplicates = [1, 3, 2, 4, 3, 2, 1, 5, 5]

# 예제 3-1: 리스트에서 짝수만 골라 중복 없이 세트로 만들기
# if n % 2 == 0 조건으로 짝수만 필터링합니다.
# 리스트에 2가 두 번 있지만, 세트의 특성상 최종 결과에는 한 번만 포함됩니다.
even_numbers_set = {n for n in numbers_with_duplicates if n % 2 == 0}
print("\n3. 중복 없는 짝수 세트:", even_numbers_set)


# --- 4. 실무 활용 예제 ---
# 컴프리헨션은 딕셔너리의 리스트와 같이 복잡한 자료구조에서도 효과적으로 사용됩니다.

# 실습에 사용할 상품 정보가 담긴 딕셔너리 리스트를 준비합니다.
products = [
    {'name': '무선 마우스', 'price': 18000},
    {'name': '블루투스 키보드', 'price': 32000},
    {'name': '모니터 받침대', 'price': 15000},
    {'name': 'USB 허브', 'price': 25000}
]

# 예제 4-1: 가격이 20000원 미만인 상품의 '이름'만 추출하여 리스트로 만들기
# for p in products: 각 상품 딕셔너리를 순회합니다.
# if p['price'] < 20000: 해당 상품의 가격이 20000 미만인지 확인합니다.
# p['name']: 조건을 통과한 상품(p)에서 'name' 키의 값만 추출하여 최종 리스트에 담습니다.
affordable_product_names = [p['name'] for p in products if p['price'] < 20000]
print("\n4. 2만원 미만 상품:", affordable_product_names)

'''
    - 정리하며
        1. 컴프리헨션은 for 반복문과 if 조건문을 한 줄로 압축하여 리스트, 딕셔너리, 세트를 생성하는 파이썬의 강력한 문법입니다.
        2. 코드가 간결해지고, '데이터를 변환/필터링하여 새 결과물을 만든다'는 의도를 명확히 드러내 가독성이 향상됩니다.
        3. 파이썬 내부적으로 최적화되어 있어, 대부분의 경우 .append()를 사용하는 for 반복문보다 성능이 더 빠릅니다.
        4. 리스트는 [], 딕셔너리와 세트는 {}를 사용하며, 딕셔너리는 '키:값' 쌍으로 표현식을 구성하는 차이점이 있습니다.
        5. 로직이 지나치게 복잡해지면, 가독성을 위해 컴프리헨션 대신 일반 for 반복문을 사용하는 것이 더 나을 수 있습니다.
'''