# ====================================
# Part 2. 참/거짓 표현과 비교 연산
# ====================================

# bool 타입은 '참(True)'과 '거짓(False)' 두 가지 값만 가지는 데이터 타입입니다.
# 프로그램의 논리적 판단과 흐름 제어에 핵심적인 역할을 합니다.
# 주의: True와 False의 첫 글자는 반드시 대문자여야 합니다.

print("--- 1. bool 타입 기본 ---")
# is_logged_in 변수에 True를 할당하여 '로그인된 상태'를 표현합니다.
is_logged_in = True
# has_error 변수에 False를 할당하여 '에러가 없는 상태'를 표현합니다.
has_error = False

# 변수에 저장된 bool 값을 출력합니다.
print("로그인 상태:", is_logged_in)
# type() 함수를 사용하여 변수의 데이터 타입을 확인합니다.
print("에러 상태 변수의 타입:", type(has_error))
print("-" * 20)


# 비교 연산자는 두 값의 관계를 평가하고, 그 결과를 bool 타입(True 또는 False)으로 반환합니다.
# == : 두 값이 같다.
# != : 두 값이 다르다.
# >  : 왼쪽 값이 오른쪽 값보다 크다.
# <  : 왼쪽 값이 오른쪽 값보다 작다.
# >= : 왼쪽 값이 오른쪽 값보다 크거나 같다.
# <= : 왼쪽 값이 오른쪽 값보다 작거나 같다.

print("--- 2. 숫자 비교 연산 ---")
# 두 값이 같은지 비교합니다.
print("100 == 100:", 100 == 100)
# 두 값이 다른지 비교합니다.
print("100 != 100:", 100 != 100)
# 크기를 비교합니다.
print("50 > 25:", 50 > 25)
print("50 < 25:", 50 < 25)
# 크거나 같음을 비교합니다.
print("10 >= 10:", 10 >= 10)
print("-" * 20)


print("--- 3. 문자열 비교 연산 ---")
# 문자열의 내용이 완전히 같은지 비교합니다.
print("'hello' == 'hello':", 'hello' == 'hello')
# 파이썬은 대소문자를 구분하므로, 다른 문자열로 판단합니다.
print("'hello' == 'Hello':", 'hello' == 'Hello')
# 문자열은 사전 순서(알파벳 순서)에 따라 크기가 비교됩니다.
print("'a' < 'b':", 'a' < 'b')
print("-" * 20)


print("--- 4. 비교 결과 변수에 저장하기 ---")
my_age = 30
adult_age = 20

# 비교 연산의 결과(True 또는 False)를 is_adult 변수에 저장합니다.
# 30 >= 20은 True이므로, is_adult 변수에는 True가 할당됩니다.
is_adult = my_age >= adult_age
print("나는 성인인가?", is_adult)
print("-" * 20)


# Truthy와 Falsy는 다른 타입의 값이 bool 문맥에서 어떻게 평가되는지에 대한 규칙입니다.
# Falsy: False로 취급되는 값들. 대표적으로 숫자 0, 0.0, 빈 문자열('') 등이 있습니다.
# Truthy: True로 취급되는 값들. Falsy가 아닌 대부분의 값입니다.
# bool() 함수를 사용하면 특정 값이 Truthy인지 Falsy인지 명확히 확인할 수 있습니다.

print("--- 5. Truthy와 Falsy ---")
# 0이 아닌 숫자는 Truthy 입니다.
print("bool(10):", bool(10))
# 숫자 0은 Falsy 입니다.
print("bool(0):", bool(0))
# 음수도 0이 아니므로 Truthy 입니다.
print("bool(-1):", bool(-1))

# 0.0이 아닌 소수는 Truthy 입니다.
print("bool(3.14):", bool(3.14))
# 소수점 0.0은 Falsy 입니다.
print("bool(0.0):", bool(0.0))

# 내용이 있는 문자열은 Truthy 입니다.
print("bool('Python'):", bool('Python'))
# 내용이 없는 빈 문자열은 Falsy 입니다.
print("bool(''):", bool(''))
print("-" * 20)


'''
- 정리하며
    1. bool 타입은 논리적인 참(True)과 거짓(False)을 표현하는 데이터 타입입니다.
    2. 비교 연산자(==, !=, >, <, >=, <=)는 두 값을 비교하여 항상 bool 타입의 결과를 반환합니다.
    3. '=='는 '같다'를 의미하는 비교 연산자이며, '='는 값을 할당하는 할당 연산자이므로 혼동하지 않도록 주의해야 합니다.
    4. 숫자 0, 빈 문자열('') 등 '비어있다'고 간주되는 값들은 Falsy(거짓 같은 값)로 취급됩니다.
    5. Falsy가 아닌 대부분의 값은 Truthy(참 같은 값)로 취급되며, 이 규칙은 향후 조건문에서 매우 유용하게 사용됩니다.
'''