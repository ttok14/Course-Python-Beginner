# ==========================================================
# Part 2. 문자열 실습02 - 인덱싱,슬라이싱,이스케이프
# ==========================================================

# --- 1. 인덱싱(Indexing): 문자열의 특정 위치에 있는 문자 접근하기 ---
print("--- 1. 인덱싱(Indexing) ---")

word = 'Python'

# 인덱싱은 대괄호[] 안에 위치 번호를 넣어 특정 문자를 가져옵니다.
# 0부터 시작하는 '양수 인덱스' 입니다.
print(f"'{word}'의 0번 인덱스: {word[0]}") # 첫 번째 글자 'P'
print(f"'{word}'의 1번 인덱스: {word[1]}") # 두 번째 글자 'y'
print(f"'{word}'의 5번 인덱스: {word[5]}") # 마지막 글자 'n' (길이 6 - 1)
print("\n")

# 뒤에서부터 세는 '음수 인덱스'도 사용할 수 있습니다.
# 문자열 길이를 모를 때 특히 유용합니다.
print(f"'{word}'의 -1번 인덱스: {word[-1]}") # 맨 마지막 글자 'n'
print(f"'{word}'의 -2번 인덱스: {word[-2]}") # 뒤에서 두 번째 글자 'o'
print("\n")

# 공백이 포함된 문자열 예시입니다.
sentence = 'Hello World'
# 공백도 하나의 문자로 인덱스를 차지한다는 점이 중요합니다.
print(f"'{sentence}'의 0번 인덱스: {sentence[0]}") # 첫 글자 'H'
print(f"'{sentence}'의 6번 인덱스: {sentence[6]}") # 공백 뒤의 'W'
print("\n")


# --- 2. 슬라이싱(Slicing): 문자열의 일부를 잘라내기 ---
print("--- 2. 슬라이싱(Slicing) ---")

text = 'Programming'

# 슬라이싱은 '시작위치:끝위치' 형식으로 문자열의 일부분을 잘라냅니다.
# 중요한 점은, 끝 위치의 문자는 포함되지 않는다는 것입니다.
print(f"'{text}'[0:4]: {text[0:4]}")   # 0번부터 4번 '앞까지' -> 'Prog'
print(f"'{text}'[4:7]: {text[4:7]}")   # 4번부터 7번 '앞까지' -> 'ram'
print("\n")

# 시작 또는 끝 위치를 생략할 수 있습니다.
print(f"'{text}'[:4]: {text[:4]}")     # 처음부터 4번 '앞까지' -> 'Prog'
print(f"'{text}'[4:]: {text[4:]}")     # 4번부터 끝까지 -> 'ramming'
print(f"'{text}'[-4:]: {text[-4:]}")   # 음수 인덱스 사용: 뒤에서 4번째부터 끝까지 -> 'ming'
print("\n")


# [실습] 이메일 주소에서 아이디와 도메인 분리하기
email = 'user@naver.com'

# find() 메서드는 특정 문자의 첫 번째 위치(인덱스)를 찾아 반환합니다.
at_index = email.find('@')
print(f"'@' 문자의 위치: {at_index}")

# 찾은 인덱스를 기준으로 슬라이싱하여 사용자 이름과 도메인을 추출합니다.
username = email[:at_index]      # 처음부터 '@' 위치 앞까지
domain = email[at_index + 1:]  # '@' 다음 문자부터 끝까지

print(f"원본 이메일: {email}")
print(f"사용자 이름: {username}")
print(f"도메인: {domain}")
print("\n")


# --- 3. 이스케이프(Escape)와 Raw String ---
print("--- 3. 이스케이프와 Raw String ---")

# 이스케이프: 특정 문자가 가진 특별한 기능에서 벗어나(escape) 일반 문자로 취급하게 만드는 방법입니다.
# 역슬래시(\)와 특정 문자를 조합하여 사용합니다.

# \n : 줄바꿈 (New line) 문자로 해석됩니다.
print("Hello\nWorld")

# \t : 탭 (Tab) 문자로 해석되어 일정한 간격을 띄웁니다.
print("첫 번째 줄\n두 번째 줄\t탭으로 들여쓰기")

# \' 또는 \" : 문자열 내에서 따옴표 자체를 문자로 표현할 때 사용합니다.
# 작은따옴표로 만든 문자열 안에 작은따옴표를 넣는 경우입니다.
print('I\'m learning Python.')
# 큰따옴표로 문자열을 감싸면 이스케이프가 필요 없습니다.
print("I'm learning Python.")
print("\n")


# Raw String: 문자열 앞 'r'을 붙여, 이스케이프 문자를 해석하지 않고 보이는 그대로 처리합니다.
# 주로 파일 경로를 다룰 때 매우 유용합니다.

# 일반 문자열로 Windows 경로를 표현하는 경우, 역슬래시를 두 번 사용해야 합니다.
file_path1 = 'C:\\Users\\Python\\Documents'
print(f"일반 문자열 경로: {file_path1}")

# Raw String으로 경로를 표현하는 경우, 경로를 그대로 복사-붙여넣기 할 수 있어 편리합니다.
file_path2 = r'C:\Users\Python\Documents'
print(f"Raw String 경로: {file_path2}")
print("\n")


'''
    - 정리하며
        1. 인덱싱(Indexing): 대괄호[]와 숫자로 특정 위치의 문자를 가져오는 기능입니다.
           - 양수 인덱스는 0부터 시작하고, 음수 인덱스는 -1부터 시작합니다.
        
        2. 슬라이싱(Slicing): [시작:끝] 형식으로 문자열의 원하는 구간을 추출합니다.
           - 끝 위치는 포함되지 않으며, 시작이나 끝을 생략할 수 있습니다.
           - find()와 같은 메서드와 조합하여 실용적으로 데이터를 처리할 수 있습니다.

        3. 이스케이프(Escape): 역슬래시(\)를 이용해 줄바꿈(\n), 탭(\t), 따옴표(\') 등 
           특수 문자를 문자열 안에 포함시키는 방법입니다.

        4. Raw String: 문자열 앞에 r을 붙여(r'...') 이스케이프 문법을 무시하고, 
           모든 문자를 있는 그대로 처리합니다. 파일 경로 지정 시에 매우 유용합니다.
'''