# ====================================
# Part5. 함수 기본 살펴보기
# ====================================

# 1. 함수가 없을 경우의 코드 반복
# 특정 작업을 여러 번 반복해야 할 때, 코드가 중복되어 유지보수가 어려워집니다.
print("--- 1. 함수가 없을 경우 (코드 중복 발생) ---")

print("프로그램의 여러 지점에서 환영 인사를 출력합니다.")
print("환영합니다!")
print("-" * 20)

# 다른 코드들이 실행되다가...
print("또 다른 지점에서 다시 환영 인사를 합니다.")
print("환영합니다!")
print("-" * 20)

# 만약 "환영합니다!"를 "안녕하세요!"로 바꾸려면 모든 코드를 일일이 수정해야 합니다.


# 2. 함수를 사용한 코드 재사용
# 반복되는 작업을 함수로 정의해두면, 필요할 때마다 호출하여 사용할 수 있습니다.
print("\n--- 2. 함수를 사용한 경우 (코드 재사용) ---")

# 함수 정의(Definition): 'greet'이라는 이름으로 환영 인사를 출력하는 기능을 만듭니다.
# 'def' 키워드로 함수를 정의합니다.
def greet():
    """환영 인사를 출력하는 함수입니다."""
    print("환영합니다!")

# 함수 호출(Call): 정의된 함수의 이름을 불러 실행합니다.
print("프로그램의 여러 지점에서 환영 인사를 출력합니다.")
greet()
print("-" * 20)

# 다른 코드들이 실행되다가...
print("또 다른 지점에서 다시 환영 인사를 합니다.")
greet()
print("-" * 20)

# 이제 문구를 바꾸고 싶으면 함수 내부만 수정하면 모든 호출에 반영됩니다.


# 3. 매개변수(Parameter)와 인자(Argument)
# 함수에 외부 값을 전달하여 다양한 상황에 대처할 수 있습니다.
print("\n--- 3. 매개변수와 인자 ---")

# 함수 정의 시 괄호 안에 선언된 변수(name)를 '매개변수(Parameter)'라고 합니다.
# 매개변수는 함수 안에서 사용할 수 있는 지역 변수입니다.
def greet_with_name(name):
    """이름을 받아 개인화된 환영 인사를 출력합니다."""
    print(f"{name}님, 환영합니다!")

# 함수를 호출할 때 전달하는 실제 값('이강원')을 '인자(Argument)'라고 합니다.
greet_with_name("이강원")
greet_with_name("홍길동")


# 4. 반환값(Return)
# 함수가 작업을 마친 후, 그 결과를 호출한 곳으로 돌려줄 수 있습니다.
print("\n--- 4. 반환값(Return) ---")

# 두 숫자를 더한 결과를 '반환'하는 함수입니다.
# return 키워드 뒤의 값이 함수의 결과물이 됩니다.
def add(a, b):
    """두 숫자를 더한 결과를 반환합니다."""
    result = a + b
    return result

# 함수를 호출하고, 그 반환값을 변수에 저장합니다.
# add(10, 20) 호출문이 반환값인 30으로 대체된다고 생각할 수 있습니다.
sum_result = add(10, 20)
print(f"10 + 20의 결과는: {sum_result} 입니다.")

# 반환값은 다른 연산에 바로 사용될 수도 있습니다.
new_result = add(5, 3) * 10
print(f"(5 + 3) * 10의 결과는: {new_result} 입니다.")


# 5. 명시적 반환이 없는 함수
# 함수에 return문이 없다면, 파이썬은 내부적으로 None을 반환합니다.
print("\n--- 5. 명시적 반환이 없는 함수 ---")

def simple_print():
    """단순히 메시지만 출력하고 명시적으로 반환하지 않는 함수입니다."""
    print("이 함수는 할 일만 하고 끝납니다.")

# 함수를 호출합니다.
simple_print()

# 함수의 반환값을 변수에 담아 확인해봅니다.
return_value = simple_print()
print(f"simple_print() 함수의 반환값: {return_value}")

# 우리가 자주 사용하는 print 함수도 반환값이 None입니다.
print_return = print("이 문장의 반환값은 무엇일까요?")
print(f"print() 함수의 반환값: {print_return}")

'''
    - 정리하며
        1. 함수(Function): 재사용 가능한 코드 묶음에 이름을 붙인 것입니다. 코드 중복을 줄이고 유지보수를 쉽게 만들어 줍니다.
        2. 정의(Definition)와 호출(Call): 함수를 만드는 것을 '정의'(`def` 키워드 사용), 실행하는 것을 '호출'(함수이름() 형태)이라고 합니다.
        3. 매개변수(Parameter): 함수가 외부로부터 값을 입력받기 위해 정의 단계에서 사용하는 변수입니다.
        4. 인자(Argument): 함수를 호출할 때 매개변수에 실제로 전달하는 값입니다.
        5. 반환값(Return): 함수가 작업을 마친 후 `return` 키워드를 통해 호출한 곳으로 돌려주는 결과값입니다.
        6. 명시적 반환이 없는 함수는 내부적으로 `None`을 반환합니다.
'''