# ====================================
# Part 6. 디버거 실습 심화 - 조건부와 트리거
# ====================================

# 이번 시간에는 디버깅 효율을 높여주는 '조건부 브레이크 포인트'와
# '트리거된 브레이크 포인트' 사용법을 실습합니다.
# 이 기능들은 복잡한 로직 속에서 특정 조건이나 순서에 따라 발생하는 버그를
# 효율적으로 추적하게 해주는 강력한 도구입니다.

print("--- 1. 조건부 브레이크 포인트 (Conditional Breakpoint) 실습 ---")

# 조건부 브레이크 포인트는 특정 조건이 참(True)일 때만 디버거를 멈추게 하는 기능입니다.
# 반복문 내에서 특정 값일 때만 상태를 확인하고 싶을 때 매우 유용합니다.

def check_numbers():
    """1부터 10까지의 숫자를 확인하는 함수입니다."""
    for i in range(1, 11):
        # VS Code에서 이 라인에 브레이크 포인트를 설정합니다.
        # 마우스 우클릭 -> '조건부 브레이크 포인트 추가'를 선택하고,
        # i == 7 이라는 조건을 입력하면 i가 7일 때만 코드가 멈춥니다.
        print(f"현재 숫자: {i}")
    print("숫자 확인 완료.")

check_numbers()

print("\n" + "="*50 + "\n")


print("--- 2. 트리거된 브레이크 포인트 (Triggered Breakpoint) 실습 ---")

# 트리거된 브레이크 포인트는 다른 브레이크 포인트가 먼저 실행되었을 때만
# 활성화되는 브레이크 포인트입니다. 코드의 특정 실행 순서 이후에만
# 디버깅을 하고 싶을 때 사용됩니다.

def prepare_data():
    """데이터를 준비하는 첫 번째 단계 함수입니다."""
    # 이 라인에 첫 번째 브레이크 포인트(A)를 설정합니다. 이 포인트가 '트리거'가 됩니다.
    print("데이터 준비 완료.")

def process_data():
    """데이터를 처리하는 두 번째 단계 함수입니다."""
    # 이 라인에 '트리거된 브레이크 포인트'(B)를 설정합니다.
    # 브레이크 포인트 A가 실행된 후에만 여기서 멈추게 됩니다.
    print("데이터 처리 시작.")

# --- 메인 코드 실행 ---

# 1. 첫 번째 process_data 호출
# 이 시점에서는 트리거(prepare_data)가 실행되지 않았으므로,
# process_data 내부의 브레이크 포인트는 활성화되지 않고 그냥 지나갑니다.
print("첫 번째 호출: prepare_data() 실행 전")
process_data()
print("-" * 20)


# 2. 두 번째 process_data 호출
# prepare_data()가 실행되어 트리거 브레이크 포인트(A)를 거치게 됩니다.
# 이후 호출되는 process_data()에서는 브레이크 포인트(B)가 활성화되어 멈춥니다.
print("두 번째 호출: prepare_data() 실행 후")
prepare_data()
process_data()

print("\n실습 완료.")

'''
    - 정리하며
        1. 조건부 브레이크 포인트 (Conditional Breakpoint):
           - '데이터의 상태'를 기준으로 디버거를 멈추게 하는 기능입니다. (예: i == 7)
           - 반복문이나 특정 변수 값의 변화를 추적할 때 유용합니다.
           - 설정 방법: 브레이크 포인트 우클릭 -> '조건부 브레이크 포인트 추가' -> 조건식 입력.

        2. 트리거된 브레이크 포인트 (Triggered Breakpoint):
           - '코드의 실행 순서'를 기준으로 디버거를 멈추게 하는 기능입니다.
           - 특정 함수(A)가 실행된 후에만 다른 함수(B)에서 디버깅하고 싶을 때 사용합니다.
           - 설정 방법: 트리거가 될 브레이크(A)를 먼저 설정 후, 멈추고 싶은 위치에서 우클릭 -> '트리거된 브레이크 포인트 추가' -> 트리거(A) 선택.

        3. [핵심] 이 두 기능을 활용하면 불필요한 중단을 최소화하고, 원하는 시점에만 정확히 코드를 분석하여 디버깅 효율을 극대화할 수 있습니다.
'''