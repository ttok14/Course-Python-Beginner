# ====================================
# Part 3. 왈러스(Walrus) 로 간결하게 처리하기
# ====================================

# 할당 표현식(Assignment Expression), 일명 '왈러스(Walrus) 연산자'는 Python 3.8부터 도입되었습니다.
# '바다코끼리'라는 별명은 연산자 `:=` 의 모양이 바다코끼리의 눈과 엄니를 닮았기 때문에 붙었습니다.
# 왈러스 연산자는 변수에 값을 할당하는 동시에, 그 값을 평가(반환)하는 두 가지 작업을 한 번에 수행합니다.

# ----------------------------------------
# 1. 왈러스 연산자 기본 동작 확인
# ----------------------------------------
print("--- 1. 왈러스 연산자 기본 동작 ---")

# if 조건문 안에서 왈러스 연산자를 사용하여 변수 x에 10을 할당합니다.
# (x := 10)은 두 가지 일을 합니다.
# 1) 변수 x에 10을 할당합니다.
# 2) 이 표현식 자체는 값 10으로 평가됩니다.
# 따라서, `if 10 > 5:` 와 동일하게 동작합니다.
if (x := 10) > 5:
    # if문 내부에서 할당된 변수 x를 바로 사용할 수 있습니다.
    print(f"x는 {x}이고, 5보다 큽니다.")

print("-" * 20)


# ----------------------------------------
# 2. while 문 리팩토링
# ----------------------------------------
print("\n--- 2. while 문 리팩토링 ---")

# --- Before: 개선 전 코드 ---
# 사용자의 입력을 받기 위한 input() 함수가 루프 진입 전과 루프 내부에서 중복으로 사용됩니다.
# 이는 코드의 가독성을 해치고 실수의 원인이 될 수 있습니다.
print("[개선 전 코드]")
# fruit = input("좋아하는 과일은? ('그만' 입력 시 종료): ")
# while fruit != "그만":
#     print(f"{fruit}, 좋은 과일이네요!")
#     fruit = input("또 좋아하는 과일은? ('그만' 입력 시 종료): ")
# print("프로그램을 종료합니다.")
# print("-" * 10)


# --- After: 왈러스 연산자 적용 후 ---
# while 조건문 안에서 입력과 조건 검사를 동시에 처리합니다.
# input() 함수의 호출이 한 번으로 줄어 코드가 간결하고 명확해집니다.
print("[개선 후 코드] - 아래 주석을 해제하고 실행해보세요.")
# prompt = "좋아하는 과일은? ('그만' 입력 시 종료): "
# while (fruit := input(prompt)) != "그만":
#     print(f"{fruit}, 좋은 과일이네요!")
# print("프로그램을 종료합니다.")

print("-" * 20)


# ----------------------------------------
# 3. if 문에서 활용하기
# ----------------------------------------
print("\n--- 3. if 문에서 활용하기 ---")

# 왈러스 연산자를 사용하면, 조건 검사에 사용할 값을 받아오는 코드와
# 조건문을 한 줄로 합쳐 코드를 간결하게 만들 수 있습니다.

# if문 안에서 사용자로부터 나이를 입력받아 정수로 변환하고, 그 결과를 age 변수에 할당합니다.
# 동시에, 할당된 age 값이 19 이상인지 검사합니다.
# if문과 else문 블록 모두에서 할당된 age 변수를 사용할 수 있습니다.
if (age := int(input("나이를 숫자로 입력하세요: "))) >= 19:
    print(f"당신의 나이는 {age}세, 성인입니다.")
else:
    print(f"당신의 나이는 {age}세, 미성년입니다.")

print("-" * 20)


# ----------------------------------------
# 4. 왈러스 연산자 사용 가이드라인
# ----------------------------------------
print("\n--- 4. 왈러스 연산자 사용 가이드라인 ---")

# [Good Case]
# 입력받은 값의 유효성을 바로 검사하는 패턴은 왈러스 연산자의 좋은 활용 예입니다.
text_input = "파이썬은 정말 재미있어요"
print(f"입력된 텍스트: '{text_input}'")
if (text := text_input) and len(text) > 10:
    print(f"입력된 텍스트 '{text}'의 길이는 10을 초과합니다.")
else:
    print("입력된 텍스트의 길이는 10 이하입니다.")

print("-" * 10)

# [Bad Case]
# 한 줄에 너무 많은 연산과 할당이 일어나면 코드를 이해하기 어렵습니다.
# 간결성보다 가독성을 우선시 하는게 좋겠습니다.
price = 10000
quantity = 2

# 아래 코드는 동작은 하지만, subtotal과 tax의 계산 과정을 한눈에 파악하기 어렵습니다.
# total = (subtotal := price * quantity) + (tax := subtotal * 0.1)
# print(f"총액 (나쁜 예): {total}")


# [Good Alternative]
# 복잡한 계산은 여러 줄로 명확하게 나누어 작성하는 것이 가독성 측면에서 더 좋습니다.
subtotal = price * quantity
tax = subtotal * 0.1
total = subtotal + tax
print(f"중간 합계: {subtotal}, 세금: {tax}")
print(f"총액 (좋은 예): {total}")


'''
    - 정리하며
        1. 왈러스 연산자(`:=`)는 변수에 값을 할당함과 동시에 그 값을 평가(반환)합니다.
        2. `while` 이나 `if` 문에서 값 할당과 조건 검사가 함께 필요한 반복적인 패턴을 간결하게 만들어줍니다.
        3. Python 3.8 이상 버전에서만 사용할 수 있는 현대적인 기능입니다.
        4. [핵심] 간결성도 중요하지만, 가독성을 해치지 않는 범위 내에서 신중하게 사용해야 합니다.
           코드를 한 줄 줄이는 것보다 동료 개발자가 쉽게 이해하는 것이 더 중요합니다.
'''