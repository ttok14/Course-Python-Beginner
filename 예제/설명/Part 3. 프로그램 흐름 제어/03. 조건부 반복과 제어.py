# ====================================
# Part 3.조건부 반복과 제어
# ====================================

# 반복문(for, while)의 흐름을 중간에 제어하는 break와 continue 키워드를 학습합니다.
# break: 반복문을 즉시 완전히 중단합니다.
# continue: 현재 반복 차례를 건너뛰고 다음 반복으로 넘어갑니다.

# 1. break: 반복문 탈출하기
print("--- 1. break 예제 ---")

# 1부터 20까지 숫자를 순회하면서 13을 만나면 반복을 중단하는 예제입니다.

for i in range(1, 21):
    # 만약 현재 숫자(i)가 13이면,
    if i == 13:
        print("13을 발견했습니다. 반복을 중단합니다.")
        break  # break가 실행되면 이 시점에서 for 반복문이 즉시 종료됩니다.

    # break가 실행되지 않은 경우에만 아래 코드가 실행됩니다.
    print(i)

print("반복문이 종료되었습니다.\n")
# 결과: 1부터 12까지만 출력되고, 13 이후의 숫자는 처리되지 않습니다.
# break는 자신이 속한 가장 가까운 반복문 하나만 탈출합니다.


# 2. continue: 현재 반복 건너뛰기
print("--- 2. continue 예제 ---")
# 1부터 10까지의 숫자 중에서 5만 건너뛰고 출력하는 예제입니다.

for i in range(1, 11):
    # 만약 현재 숫자(i)가 5이면,
    if i == 5:
        print("(5는 건너뜁니다.)")
        continue  # continue가 실행되면, 이 아래의 코드를 실행하지 않고 바로 다음 반복(i=6)으로 넘어갑니다.

    # continue가 실행되지 않은 경우에만 아래 코드가 실행됩니다.
    print(f"현재 숫자는 {i}입니다.")

print("반복문이 종료되었습니다.\n")
# 결과: 5를 제외한 1부터 10까지의 숫자가 출력됩니다.
# continue는 특정 조건에서 현재 반복의 나머지 부분을 건너뛸 때 유용합니다.


# 3. 실전 활용: while True와 break를 이용한 사용자 입력 처리
print("--- 3. while True와 break 활용 예제 ---")
# 사용자가 특정 조건을 만족하는 값을 입력할 때까지 계속 입력을 받는 패턴입니다.

# 아래 코드의 주석을 해제하고 실행해보세요.
# while True:  # '무한 루프'를 생성합니다. 이 루프는 내부에서 break를 만나야만 종료됩니다.
#     agreement = input("약관에 동의하십니까? (동의하려면 '동의합니다' 입력): ")

#     # 사용자가 '동의합니다'를 정확히 입력했는지 확인합니다.
#     if agreement == '동의합니다':
#         print("회원가입에 동의하셨습니다. 다음 단계를 진행합니다.")
#         break  # 조건이 만족되었으므로 break를 통해 무한 루프를 탈출합니다.
#     else:
#         # 조건이 만족되지 않으면 사용자에게 다시 안내하고 루프의 처음으로 돌아갑니다.
#         print("약관에 동의해야만 회원가입을 진행할 수 있습니다.")

print("사용자 동의 확인 절차가 끝났습니다. (예제 실행을 위해 코드는 주석 처리됨)\n")


# 4. 실전 활용: continue를 이용한 데이터 필터링
print("--- 4. continue 활용한 데이터 필터링 예제 ---")
# 데이터 목록에서 유효하지 않은 값을 제외하고 계산하는 예제입니다.

scores = [88, 95, 70, -5, 100, 55]  # 유효하지 않은 점수(-5)가 포함된 리스트
total_score = 0

for score in scores:
    # 점수가 0 미만이거나 100을 초과하는 경우 유효하지 않은 데이터로 간주합니다.
    if score < 0 or score > 100:
        print(f"유효하지 않은 점수 발견: {score} (처리하지 않음)")
        continue  # 유효하지 않은 점수이므로 합산하지 않고 다음 점수로 넘어갑니다.

    # continue가 실행되지 않은 유효한 점수만 합산 과정에 포함됩니다.
    total_score += score
    print(f"현재 점수: {score}, 현재까지 합계: {total_score}")

print(f"\n최종 유효 점수 합계: {total_score}")

'''
    - 정리하며
        1. break는 반복문 자체를 완전히 '종료'시킬 때 사용합니다. ('이제 그만!')
        2. continue는 현재 반복 회차만 '건너뛸' 때 사용합니다. ('이번만 패스!')
        3. 'while True'와 'break'를 조합하면, 특정 조건을 만족할 때까지 계속되는 로직을 명확하게 작성할 수 있습니다.
        4. 'continue'는 데이터 목록을 처리할 때, 특정 조건의 데이터를 제외(필터링)하고 로직을 이어가고 싶을 때 매우 유용합니다.
        5. 이 두 키워드는 반복문을 훨씬 더 유연하고 효율적으로 제어할 수 있게 해주는 중요한 도구입니다.
'''