# ====================================
# Part 3. 반복 작업 처리하기
# ====================================

# 반복문은 정해진 규칙이나 조건에 따라 특정 코드 블록을 여러 번 자동으로 실행시키는 구문입니다.
# 파이썬에서는 주로 for 문과 while 문을 사용합니다.


# --- 1. for 문: 정해진 횟수만큼 반복하기 (range 사용) ---
# range(5)는 0, 1, 2, 3, 4 까지 총 5개의 숫자를 만들어냅니다.
# for문은 이 숫자들을 하나씩 변수 i에 대입하며 코드 블록을 5번 반복 실행합니다.
print("--- 1. for 문 기본 ---")
for i in range(5):
    print("환영합니다!")

# 반복 과정에서 변수 i가 실제로 어떤 값을 가지는지 확인할 수 있습니다.
# 프로그래밍에서 반복문의 순서를 나타내는 변수 이름으로 i (index)를 관습적으로 사용합니다.
print("\n--- 반복 변수 i의 값 확인 ---")
for i in range(5):
    print(i)


# --- 2. range() 함수 심화 ---
# range(start, stop): start 부터 stop-1 까지의 숫자를 생성합니다.
print("\n--- 2. range() 함수 심화: 시작과 끝 지정 ---")
print("1부터 10까지 출력:")
for i in range(1, 11):
    print(i, end=' ') # end=' '는 줄바꿈 대신 공백을 출력해줍니다.

# range(start, stop, step): start 부터 stop-1 까지 step 만큼 증가하는 숫자를 생성합니다.
print("\n\n0부터 8까지 짝수만 출력:")
for i in range(0, 10, 2):
    print(i, end=' ')
print("\n") # 다음 출력을 위해 줄바꿈을 추가합니다.


# --- 3. for 문: 문자열 순회하기 ---
# 문자열은 각 문자를 순서대로 포함하는 순회 가능한(iterable) 객체입니다.
# for문은 문자열의 각 문자를 하나씩 변수에 담아 반복할 수 있습니다.
print("\n--- 3. 문자열 한 글자씩 출력 ---")
for char in '파이썬':
    print(char)


# --- 4. for 문: 값 누적하기 ---
# 반복문을 사용하여 특정 범위의 숫자 합계를 구하는 예제입니다.
# 합계를 저장할 변수를 0으로 '초기화(Initialization)'하는 것이 중요합니다.
print("\n--- 4. 1부터 10까지의 합계 구하기 ---")
total = 0
for i in range(1, 11):
    total = total + i # 기존 total 값에 현재 i 값을 더하여 다시 total에 저장합니다.
    print(f"i={i}, 현재 total={total}") # 중간 과정을 확인하기 위한 출력입니다.

print(f"1부터 10까지의 최종 합계: {total}")


# --- 5. while 문: 특정 조건 동안 반복하기 ---
# while문은 주어진 조건식이 참(True)인 동안 코드 블록을 계속해서 반복합니다.
print("\n--- 5. while 문 기본: 카운트다운 ---")
count = 5
while count > 0:
    print(f"카운트다운: {count}")
    count = count - 1 # 이 코드가 없으면 count 값이 변하지 않아 무한 루프에 빠집니다.

print("발사!")


# --- 6. while 문 실전 예제: 숫자 맞추기 게임 ---
# while문과 if문을 조합하여 사용자의 입력을 받아 처리하는 간단한 게임을 만듭니다.
print("\n--- 6. 숫자 맞추기 게임 ---")
answer = 5
running = True # 루프의 실행 상태를 제어하는 '플래그(flag)' 변수입니다.
attempts = 0 # 시도 횟수를 저장하는 변수입니다.

while running:
    attempts += 1 # 시도 횟수를 1 증가시킵니다.
    
    # input() 함수는 사용자로부터 문자열을 입력받습니다.
    # int() 함수를 사용하여 입력받은 문자열을 정수(숫자)로 변환해야 합니다.
    guess = int(input(f"시도 {attempts}번째: 1부터 10 사이의 숫자를 맞춰보세요: "))

    # 사용자가 입력한 값과 정답을 비교합니다.
    if guess == answer:
        print(f"정답입니다! {attempts}번 만에 맞춰내셨네요!")
        running = False # 정답을 맞췄으므로 루프를 종료합니다.
    else:
        print(f"틀렸습니다. 입력하신 숫자: {guess}, 다시 시도하세요.")


'''
    - 정리하며
        1. for 문: 정해진 횟수만큼 반복하거나, 리스트, 문자열 등 순회 가능한 객체의 모든 항목을 하나씩 처리할 때 사용합니다.
        2. while 문: 특정 조건이 참(True)인 동안 코드를 계속해서 반복할 때 사용하며, 반복 횟수가 정해져 있지 않은 경우에 유용합니다.
        3. [핵심] for 문은 '횟수 기반' 반복에, while 문은 '조건 기반' 반복에 더 적합합니다.
        4. 조건문(if)과 반복문(for, while)을 조합하면 훨씬 더 유용하고 강력한 프로그램을 만들 수 있습니다.
'''